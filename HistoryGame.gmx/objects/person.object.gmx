<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>person_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.personCreated = true; //lets land object know that at least 1 person is created
global.clickCount = 1; //count for what phase of movement u are on

global.chosenPerson = self;
speed = 0;//maybe unneeded
global.chosenPerson.speed = 0;//maybe unneeded
depth = -10;



///has moved yet this turn?
hasMoved = false;

tribeName = "NewTribe"

//for topLeft
global.onClickPerson = self;
global.mergeTribesTribe = self//will be overWritten

//for calories
    var i;
    var tempLandNum = 0;
    firstTurn = true; // so to skip case 2 in calories on first turn
    var tempLand;
     absorbCals = true; // so calories are absorbed once per turn.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The movement starting is done in the land object

if (distance_to_point(global.chosenLand.destX,global.chosenLand.destY) == 0 ){
  speed = 0; 
  }
 
if(global.phase = 1){
hasMoved = false;
}

totalMembers = tribe[98].cals; //for returning from mergeRoom

if((totalMembers == 0 )){
num = instance_number(person);
// First, make a list of all instances of the given type
for (var i = 0; i &lt; num; i++ ){
    if(instance_find(person, i) != self){
    global.onClickPerson = instance_find(person, i); 
    global.mergePerson = instance_find(person, i); 
    }
    }
with(mergeTribe)
   {
    instance_destroy();
   }

numofTribes = instance_number(person);
if(numofTribes == 1){
show_message("All tribemembers have left, Game will restart.");
game_restart();
}else{
instance_destroy();
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///calories

switch (global.phase)
   {
   case 1:
    if(!firstTurn){
     
     if(absorbCals){ // so calories only absorbed once on phase 1
     with(instance_find(land,tempLandNum)){
  
    if(calOnLand&gt;(2000*other.totalMembers)){
    calOnLand = calOnLand - (2000*other.totalMembers);  
    global.tribeCals += (2000*other.totalMembers);
    }else{
    global.tribeCals += calOnLand;
    calOnLand = 0;
    
    
    } 
    }
    absorbCals = false;
    }
    }
   break;
   case 4:
   
   for (i = 0; i &lt; instance_number(land); i += 1)
   {
   if( distance_to_object( instance_find(land,i)) &lt; 5){
            tempLandNum = i;
    
    }
   
   }
   firstTurn = false;
   
   break
   
  case 2:
  if(!firstTurn){
 
  absorbCals = true; // resets so calories will be absorbed on phase 1
 
 }
   break;
 
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
if(global.clickCount == 1 &amp;&amp; !hasMoved &amp;&amp; global.phase == 4){

        global.chosenPerson = self;
        hasMoved = true;
        global.clickCount = 2;
   }
   


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
